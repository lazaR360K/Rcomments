datOurs = Data_Questionnaire
sum(is.na(datOurs))
datOurs = na.omit(datOurs)
View(datOurs)
library(lubridate)
require(lubridate)
datOurs$Birthday = ymd(datOurs$Birthday)
str(datOurs)
datOurs$Gender = as.factor(datOurs$Gender)
str(datOurs)
View(datOurs)
#new data frame
datOurs2 = select(.data = datOurs, "Gender", "HighSchool", "Weight", "Height")
View(datOurs2)
summarise(datOurs2)
summary(datOurs2)
quart = quantile(datOurs2$Gender, datOurs2$Height)
quart = quantile(datOurs2$Gender)
quart = quantile(datOurs2$Height, probs = 0.25, 0,50, 0.25)
quart
# We get error because it DOES NOT MAKE SENSE!
quantile(datOurs2$Height, probs=c(0.25, 0.5, 0.75))
quart = quantile(datOurs2$Height, probs = c(0.25, 0.5, 0.75))
quart
absfreq = abs(datOurs2$Gender)
absfreq = abs(datOurs2$HighSchool)
absfreq = abs(datOurs2$Height)
absfreq
# e) absolute and relative frequencies of Gender and High-School
# Single tables
table(datOurs2$Gender)
absfreq = table(datOurs2$Gender)
absfreqhs = table(datOurs2$HighSchool)
#cross tables
table(absfreq, absfreqhs)
#cross tables
table(datOurs2$Gender, datOurs2$HighSchool)
cross = table(datOurs2$Gender, datOurs2$HighSchool)
marGen = rowSums(cross)
marHS = colSums(cross)
#total size
N = sum(cross)
ni = marGen %o% marHS / N
ni
cij = (cross - ni)/ni
cij
#chisquare evaluation
chiq= sum(cij^2*ni)
chiq
# Evaluate chisquare
chisqstat <- sum(cij^2*theotabGenHS)
quant = (nrow(cross)-1) * (ncol(cross) -1)
qhh = (0.9, df = quant)
qhh(0.9, df = quant)
qchisq(0.9, df=dfs)
qchisq(0.9, df=quant)
# Cross-table: storing
tabGenHS <- table(datOurs2$Gender, datOurs2$HighSchool)
# Derive marginals and storing
marGen <- rowSums(tabGenHS)
marHS <- colSums(tabGenHS)
# The total size is
N <- sum(tabGenHS)
# For the theorethical, we could do a loop, but it is faster as:
theotabGenHS <- marGen%o%marHS/N
# Contingencies
cij <- (tabGenHS-theotabGenHS)/theotabGenHS
# Evaluate chisquare
chisqstat <- sum(cij^2*theotabGenHS)
# What is the quantile of the chisq with (r-1)(c-1) df
dfs <- (nrow(tabGenHS)-1)*(ncol(tabGenHS)-1)
qchisq(0.9, df=dfs)
marGen
marHS
N
theotabGenHS
cij
chisqstat
meanW(datOurs2$Weight)
meanW= mean(datOurs2$Weight)
meanH= mean(datOurs2$Height)
sdW = sd(datOurs2$Weight)
sdh = sd(datOurs2$Height)
hist(x = meanW, y=sdW)
boxplot(datOurs2$Height)
boxplot(datOurs2$Weight)
plot(datOurs2$Weight, datOurs2$Height)
hist(sdW)
hist(sdW, sdh)
hist(sdW, sdh)
cov(datOurs2$Weight, datOurs2$Height)
cor(datOurs2$Weight, datOurs2$Height)
N
cross
covmine = sum((datOurs2$Height - meanH) * (datOurs2$Weight - meanW))/N
cormine = covmine/(sdh*sdw)
cormine = covmine/(sdh*sdw)
cormine = covmine/(sdh*sdW)
cormine
covmine
cov(datOurs2$Weight, dasdWcov(datOurs2$Weight, datOurs2$Height)
cov(datOurs2$Weight, dasdWcov(datOurs2$Weight, datOurs2$Height)
cov(datOurs2$Weight, dasdWcov(datOurs2$Weight, datOurs2$Height)
cor(datOurs2$Weight, datOurs2$Height)
cor(datOurs2$Weight, datOurs2$Height)
cov(datOurs2$Height, datOurs2$Weight)
cor(datOurs2$Weight, datOurs2$Height)
cov = cov(datOurs2$Height, datOurs2$Weight)
cor = cor(datOurs2$Weight, datOurs2$Height)
plot(x = cov, y= cor, type = b)
plot(x = cov, y= cor, type = a)
plot(x = cov, y= cor)
plot(x = datOurs2$Weight, y=datOurs2$Height)
plot(x = datOurs2$Weight, y=datOurs2$Height, type = b)
plot(x = datOurs2$Weight, y=datOurs2$Height, type = "b")
View(datOurs2)
View(datOurs2)
mutate(.data = datOurs2, datOurs2$Height = datOurs2$Height/100)
mutate(.data = datOurs2, datOurs2$Height = [datOurs2$Height/100])
datOurs2 %>%
mutate('Height' = 'Height'/100)
str(datOurs2)
datOurs2 %>%
mutate(Height = Height/100)
str(datOurs2)
View(datOurs2)
library(dplyr)
datOurs2 %>% mutate(Height = Height_m/100)
datOurs2 %>% mutate(Height = Height/100)
View(datOurs2)
datOurs2 = datOurs2 %>% mutate(Height = Height/100)
View(datOurs2)
datOurs2$BMI = (datOurs2$Weight/datOurs2$Height^2)
View(datOurs2)
datOurs2$BMIclasses =
?cut
datOurs2$BMIclasses =
?cut
?cut
datOurs2$BMIclasses = cut(datOurs2$BMI, breaks = (from= 10, to=35), by=5)
datOurs2$BMIclasses = cut(datOurs2$BMI, breaks = 10, 35)
datOurs2$BMIclasses = cut(datOurs2$BMI, breaks = c(10,15,20,25,30,35))
View(datOurs2)
datOurs2$BMIclasses = cut(datOurs2$BMI, seq(10, 35, by=5), ordered_result = T)
View(datOurs2)
str(datOurs2)
quantile(x = datOurs2$BMIclasses, probs = 0.25, 0.5, 0.75)
quantile(x = datOurs2$BMIclasses, probs = c(0.25, 0.5, 0.75), type = 1)
datOurs2$BMIclasses
View(datOurs2)
quantile(datOurs2$BMIClass, probs=c(0.25, 0.5, 0.75), type=1)
View(datOurs2)
datOurs2$BMIclasses = cut(datOurs2$BMI, seq(10, 35, by=5), ordered_result = T)
quantile(datOurs2$BMIclasses, probs=c(0.25, 0.5, 0.75), type=1)
cor(datOurs2$BMI, datOurs2$Gender)
datOurs2$Gnum = as.numeric(datOurs2$Gender)
datOurs2$Gnum = as.factor(datOurs2$Gender)
names <- c("Alfredo", "Marco", "Stefania", "Giovanna", "Luca", "Stefano", "Francesca", "Paolo", "Maria")
surnames <- c("Rossi", "Franceschini", "Bianchi", "Lucenti", "Albertini", "De Paolis", "Modesto", "Franchi", "Lasinio")
genders <- c("Male", "Male", "Female", "Female", "Male", "Male", "Female", "Male", "Female")
weights <- c(79, 72, 57, 59, 59, 64, 56, 66, 80)
combine(names, surnames)
namesurname = paste(names, surnames)
dat = c(namesurname, genders, weights)
head(dat)
str(dat)
View(dat)
dat = (namesurname, genders, weights)
dat = namesurname, genders, weights
dat = c('namesurname', 'genders', 'weights')
View(dat)
dat = data.frame(namesurname = NameSurname, genders = Gender, weights = Weight)
dat = data.frame(namesurname = "NameSurname", genders = "Gender", weights = "Weight")
View(dat)
names <- c("Alfredo", "Marco", "Stefania", "Giovanna", "Luca", "Stefano", "Francesca", "Paolo", "Maria")
surnames <- c("Rossi", "Franceschini", "Bianchi", "Lucenti", "Albertini", "De Paolis", "Modesto", "Franchi", "Lasinio")
genders <- c("Male", "Male", "Female", "Female", "Male", "Male", "Female", "Male", "Female")
weights <- c(79, 72, 57, 59, 59, 64, 56, 66, 80)
namesurname = paste(names, surnames)
dat = data.frame(NameSurname = namesurname, Gender = genders, Weight = weights)
View(dat)
glimpse(dat)
head(dat, n=5)
str(dat)
summary(dat)
print(dat$NameSurname, 'Luca Albertini' )
print(dat$NameSurname == Luca Albertini )
print(dat$NameSurname == Luca Albertini)
print(dat$NameSurname == 'Luca Albertini')
print(dat$NameSurname = 'Luca Albertini')
print(dat$NameSurname)
dat(dat$NameSurname = 'Luca Albertini', c(Gender, Weight))
dat(dat$NameSurname == "Luca Albertini", c("Gender", "Weight"))
dat[dat$NameSurname == "Luca Albertini", c("Gender", "Weight")]
as.factor("Gender")
str(dat)
dat$Gender = as.factor(dat$Gender)
str(dat)
absgen = table(dat$Gender)
sum(dat$Gender)
absgen = table(dat$Gender)
relfreq = table(dat$Gender)/sum(table(dat$Gender))
absgen
relfreq
mean(dat$Weight)
sd(dat$Weight)
quantile(x = dat$Weight, probs = c(0.25, 0.5, 0.75), type = 1)
quantile(x = dat$Weight, probs = c(0.25, 0.5, 0.75))
boxplot(quantile(x = dat$Weight, probs = c(0.25, 0.5, 0.75)))
qnt = quantile(x = dat$Weight, probs = c(0.25, 0.5, 0.75))
boxplot(quantile(x = dat$Weight, probs = c(0.25, 0.5, 0.75)))
hist(qnt)
boxplot(dat$Weight)
hist(dat$Weight)
maledix = dat$Weight == "Gender"
maledix = dat$Gender == "Gender"
femidx <- dat$Gender=="Female"
mean(dat$Weight[maleidx])
maleidx = dat$Gender == "Gender"
femidx <- dat$Gender=="Female"
mean(dat$Weight[maleidx])
sd(dat$Weight[maleidx])
quantile(dat$Weight[maleidx], probs = c(0.25, 0.5, 0.75))
boxplot(dat$Weight[maleidx])
healthcare.coverage <- read.csv("C:/Users/User/Downloads/healthcare-coverage.csv", sep="")
library(readr)
healthcare_coverage <- read_csv("C:/Users/User/Downloads/healthcare-coverage.csv")
View(healthcare_coverage)
rm(healthcare_coverage)
library(readr)
healthcare_coverage <- read_csv("C:/Users/User/Downloads/healthcare-coverage.csv",
skip = 1)
View(healthcare_coverage)
require(tidyverse)
require(magrittr)
View(healthcare_coverage)
View(healthcare_coverage)
rm(healthcare_coverage
)
read.csv("C:\Users\User\Downloads\healthcare-coverage.csv")
read.csv("C:/Users/User/Downloads/healthcare-coverage.csv")
read_lines("C:/Users/User/Downloads/healthcare-coverage.csv")
read_lines("C:/Users/User/Downloads/healthcare-coverage.csv", n=10)
read_lines("C:/Users/User/Downloads/healthcare-coverage.csv", n_max=10)
read.csv("C:/Users/User/Downloads/healthcare-coverage.csv", skip = 2)
datc = read.csv("C:/Users/User/Downloads/healthcare-coverage.csv", skip = 2)
View(datc)
View(datc)
read_lines("C:/Users/User/Downloads/healthcare-spending.csv", n_max = 10)
read.csv("C:/Users/User/Downloads/healthcare-spending.csv", skip=2)
dats = read.csv("C:/Users/User/Downloads/healthcare-spending.csv", skip=2)
datc = read.csv("C:/Users/User/Downloads/healthcare-coverage.csv", skip = 2, n_max=52)
require(tidyverse)
require(magrittr)
read_lines("C:/Users/User/Downloads/healthcare-coverage.csv", n_max=10)
read.csv("C:/Users/User/Downloads/healthcare-coverage.csv", skip = 2)
datc = read.csv("C:/Users/User/Downloads/healthcare-coverage.csv", skip = 2, n_max=52)
View(datc)
datc = datc[1:52, ]
View(datc)
View(dats)
dats = dats[1:52, ]
View(dats)
library(dplyr)
na_if(dats)
sum(is.na(datc))
sum(is.na(dats))
View(dats)
View(dats)
View(dats)
View(dats)
View(datc)
View(datc)
na_if(x = dats)
na_if(x = dats, y = NA)
View(dats)
View(datc)
na_if(x = datc, y = NA)
View(datc)
datc2 = datc %>% mutate(
across(where(is.character),
~na_if(., y= "N/A"))) %>%
mutate(across(Location,
as.numeric))
View(datc2)
?across
View(datc)
View(datc)
View(datc)
View(datc2)
# The missing values were recorded as "N/A" in the original data, which is recognized by R as a string
# We must replace "N/A" with NA in all character columns
# After replacement, we convert them to numeric
datc2 <- datc %>% mutate(
across(where(is.character),       # Applies the mutate to the character columns only
~na_if(., y="N/A"))) %>%   # Function to use on each column
mutate(across(-Location,          # Applies mutate tu all columns but location
as.numeric))        # Converts everything to numeric
glimpse(datc2)
View(datc2)
library(tidyverse)
library(tidyr)
View(datc2)
View(datc)
datc2 = datc2 %>%
pivot_longer(
cols = starts_with("Type_"),
names_to = "Type_Year",
values_to = "Coverage"
)
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
)
View(datc2)
?separate
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = "type_year", into = c("Type", "Year"))
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = "type_year", sep = "__", convert = T, into = c("Type", "Year"))
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = type_year, sep = "__", convert = T, into = c("Type", "Year"))
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = type_year, sep = "__", convert = T, into = c("type", "year"))
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = type_year, sep = "__", convert = T, into = c("year", "type"))
View(datc2)
datc2 <- datc %>% mutate(
across(where(is.character),       # Applies the mutate to the character columns only
~na_if(., y="N/A"))) %>%   # Function to use on each column
mutate(across(-Location,          # Applies mutate tu all columns but location
as.numeric))       # Converts everything to numeric
glimpse(datc2)
library(tidyverse)
library(tidyr)
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = type_year, sep = "__", convert = T, into = c("year", "type"))
View(datc2)
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = type_year, sep = "__", convert = T, into = c("type", "year"))
datc2 <- datc %>% mutate(
across(where(is.character),       # Applies the mutate to the character columns only
~na_if(., y="N/A"))) %>%   # Function to use on each column
mutate(across(-Location,          # Applies mutate tu all columns but location
as.numeric))       # Converts everything to numeric
glimpse(datc2)
library(tidyverse)
library(tidyr)
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = type_year, sep = "__", convert = T, into = c("type", "year"))
View(datc2)
datc2 <- datc %>% mutate(
across(where(is.character),       # Applies the mutate to the character columns only
~na_if(., y="N/A"))) %>%   # Function to use on each column
mutate(across(-Location,          # Applies mutate tu all columns but location
as.numeric))       # Converts everything to numeric
glimpse(datc2)
library(tidyverse)
library(tidyr)
datc2 = datc2 %>%
pivot_longer(
-Location,
names_to = "type_year",
values_to = "coverage"
) %>%
separate(col = type_year, sep = "__", convert = T, into = c("year", "type"))
View(datc2)
totbyyear = datc2 %>%
filter(type= "Total") %>%
rename(total_original = Coverage) %>%
select(-type)
totbyyear = datc2 %>%
filter(type== "Total") %>%
rename(total_original = Coverage) %>%
select(-type)
totbyyear = datc2 %>%
filter(type== "Total") %>%
rename(total_original = coverage) %>%
select(-type)
View(totbyyear)
totbyall = datc2 %>%
totbyall = datc2 %>%
filter(type! == "Total") %>%
totbyall = datc2 %>%
filter(type!== "Total") %>%
totbyall = datc2 %>%
filter(type == "Total") %>%
group_by(Location, year) %>%
summarise(total_mine = sum(coverage, na.rm = T)) %>%
ungroup()
View(totbyall)
totbyyear_mine <- datc2 %>% filter(type!="Total") %>% group_by(Location, year) %>%
summarise(tot_mine=sum(coverage, na.rm=T)) %>% ungroup()
View(totbyyear_mine)
View(totbyyear)
View(totbyyear)
View(totbyyear_mine)
install.packages("reticulate")
library(reticulate)
generate_comment <- function(r_code) {
# Source the Python script
source_python("path/to/your/package/python_scripts/generate_comments.py")
# Call the Python function
commented_code <- py$generate_comment(r_code)
return(commented_code)
}
library(reticulate)
generate_comment <- function(r_code) {
# Source the Python script
source_python("C:/Users/User/Downloads/untitled23.py")
# Call the Python function
commented_code <- py$generate_comment(r_code)
return(commented_code)
}
mkdir -p yourpackage/inst/rstudio
install.packages("usethis")
library(usethis)
usethis::create_package("path/to/your/package")
# Source the Python script
source_python("C:/Users/User/Downloads/package/untitled23.py")
usethis::create_package("C:/Users/User/Downloads/package")
git clone https://github.com/lazaR360K/RcommentsAddin.git
system("git clone https://github.com/lazaR360K/RcommentsAddin.git")
setwd("RcommentsAddin")
devtools::install()
# Clone the repository
system("git clone https://github.com/lazaR360K/RcommentsAddin.git")
# Set working directory to the cloned repository
setwd("RcommentsAddin")
setwd("C:/Users/User/Documents/Rcomments")
# Write the .Rbuildignore file
writeLines(c(
".Rproj.user",
".Rhistory",
"*.Rproj"
), ".Rbuildignore")
# Commit the changes
system("git add .Rbuildignore .gitignore")
system('git commit -m "Update .gitignore and .Rbuildignore"')
system("git push origin master")
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install()
.Last.error
# Set up Git user information (if not already set)
system("git config --global user.email 'your.email@example.com'")
system("git config --global user.name 'Your Name'")
# Set working directory to the repository
setwd("C:/Users/User/Documents/Rcomments")
# Correct the .Rbuildignore file
writeLines(c(
".Rproj.user",
".Rhistory",
"\\.Rproj$"
), ".Rbuildignore")
# Commit the changes
system("git add .Rbuildignore")
system('git commit -m "Correct .Rbuildignore pattern"')
system("git push origin master")
# Install the package
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install()
devtools::check()
library(Rcomments)
install.packages("Rcomments.Rproj")
install.packages("Rcomments")
library(Rcomments)
